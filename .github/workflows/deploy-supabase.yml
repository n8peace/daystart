name: Deploy Supabase Functions

on:
  push:
    branches: [main]
    paths:
      - 'supabase/**'
  pull_request:
    branches: [main]
    paths:
      - 'supabase/**'
  workflow_dispatch: # Manual trigger

env:
  TEST_RECEIPT_ID: test-deploy-${{ github.run_id }}
  MAX_WAIT_TIME: 300
  CHECK_INTERVAL: 10

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Make scripts executable
      run: chmod +x scripts/*.sh
        
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
        
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Deploy to Supabase
      id: deploy
      run: |
        echo "üöÄ Starting Supabase deployment..."
        
        # Check if we're in the right directory
        if [[ ! -f "supabase/functions/process_jobs/index.ts" ]]; then
          echo "‚ùå Not in the DayStart project root directory!"
          exit 1
        fi
        
        # Link project
        echo "üîó Linking Supabase project..."
        supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} \
          --password ${{ secrets.SUPABASE_DB_PASSWORD }}
        
        # Run migrations
        echo "üóÑÔ∏è Running database migrations..."
        supabase db push
        
        # Deploy functions
        echo "‚ö° Deploying Edge Functions..."
        supabase functions deploy
        
        # Set secrets
        echo "üîê Setting function secrets..."
        if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
          supabase secrets set OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
        fi
        if [ -n "${{ secrets.ELEVENLABS_API_KEY }}" ]; then
          supabase secrets set ELEVENLABS_API_KEY="${{ secrets.ELEVENLABS_API_KEY }}"
        fi
        if [ -n "${{ secrets.WORKER_AUTH_TOKEN }}" ]; then
          supabase secrets set WORKER_AUTH_TOKEN="${{ secrets.WORKER_AUTH_TOKEN }}"
        fi
        if [ -n "${{ secrets.NEWSAPI_KEY }}" ]; then
          supabase secrets set NEWSAPI_KEY="${{ secrets.NEWSAPI_KEY }}"
        fi
        if [ -n "${{ secrets.GNEWS_API_KEY }}" ]; then
          supabase secrets set GNEWS_API_KEY="${{ secrets.GNEWS_API_KEY }}"
        fi
        if [ -n "${{ secrets.RAPIDAPI_KEY }}" ]; then
          supabase secrets set RAPIDAPI_KEY="${{ secrets.RAPIDAPI_KEY }}"
        fi
        
        echo "‚úÖ Deployment completed successfully"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        
    - name: Create test job
      id: test_job
      run: |
        echo "üß™ Creating test job to validate deployment..."
        echo "üìç Test receipt ID: ${{ env.TEST_RECEIPT_ID }}"
        
        # Schedule for immediate processing (current date, current time + 1 minute)
        TODAY=$(date -u +%Y-%m-%d)
        SCHEDULED_AT=$(date -u -v +1M +%Y-%m-%dT%H:%M:%S%Z 2>/dev/null || date -u -d "+1 minute" +%Y-%m-%dT%H:%M:%S%Z)
        
        echo "üìÖ Test job scheduled for immediate processing: ${SCHEDULED_AT}"
        
        # Create test job
        RESPONSE=$(curl -s -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
          -H "x-client-info: ${{ env.TEST_RECEIPT_ID }}" \
          -H "x-auth-type: test-deploy" \
          -d "{
            \"local_date\": \"${TODAY}\",
            \"scheduled_at\": \"${SCHEDULED_AT}\",
            \"preferred_name\": \"Deployment Test\",
            \"include_weather\": false,
            \"include_news\": true,
            \"include_sports\": false,
            \"include_stocks\": false,
            \"stock_symbols\": [],
            \"include_calendar\": false,
            \"include_quotes\": true,
            \"quote_preference\": \"motivational\",
            \"voice_option\": \"voice1\",
            \"daystart_length\": 30,
            \"timezone\": \"America/New_York\",
            \"test_mode\": true
          }" \
          "https://${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co/functions/v1/create_job")
        
        echo "üìÑ API Response: ${RESPONSE}"
        
        # Extract job ID (API returns "job_id" not "id")
        JOB_ID=$(echo "${RESPONSE}" | grep -o '"job_id":"[^"]*' | cut -d'"' -f4)
        
        if [[ -z "${JOB_ID}" ]]; then
          echo "‚ùå Failed to extract job ID from response"
          echo "üîç Looking for 'job_id' field in: ${RESPONSE}"
          # Try to extract error message if present
          ERROR_MSG=$(echo "${RESPONSE}" | grep -o '"error":"[^"]*' | cut -d'"' -f4)
          if [[ -n "${ERROR_MSG}" ]]; then
            echo "‚ùå Error: ${ERROR_MSG}"
          fi
          exit 1
        fi
        
        echo "‚úÖ Test job created with ID: ${JOB_ID}"
        echo "job_id=${JOB_ID}" >> $GITHUB_OUTPUT
        
    - name: Monitor test job
      run: |
        JOB_ID="${{ steps.test_job.outputs.job_id }}"
        echo "üìä Monitoring job: ${JOB_ID}"
        
        START_TIME=$(date +%s)
        JOB_STATUS="pending"
        
        while [[ "${JOB_STATUS}" != "completed" ]]; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - START_TIME))
          
          if [[ ${ELAPSED} -gt ${{ env.MAX_WAIT_TIME }} ]]; then
            echo "‚ùå Job processing timeout after ${MAX_WAIT_TIME} seconds"
            exit 1
          fi
          
          # Check job status
          STATUS_RESPONSE=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
            -H "x-client-info: ${{ env.TEST_RECEIPT_ID }}" \
            "https://${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co/functions/v1/get_audio_status?job_id=${JOB_ID}")
          
          JOB_STATUS=$(echo "${STATUS_RESPONSE}" | grep -o '"status":"[^"]*' | cut -d'"' -f4)
          
          case "${JOB_STATUS}" in
            "completed")
              echo "‚úÖ Job completed successfully!"
              echo "${STATUS_RESPONSE}"
              ;;
            "failed")
              echo "‚ùå Job failed!"
              echo "${STATUS_RESPONSE}"
              
              # Run debug script if available
              if [[ -f "scripts/debug-process-jobs.sh" ]]; then
                echo "üîç Running debug collection..."
                bash scripts/debug-process-jobs.sh "${JOB_ID}" || true
              fi
              exit 1
              ;;
            "processing")
              echo "‚è≥ Job is processing... (${ELAPSED}s elapsed)"
              ;;
            *)
              echo "üìä Job status: ${JOB_STATUS} (${ELAPSED}s elapsed)"
              ;;
          esac
          
          sleep ${{ env.CHECK_INTERVAL }}
        done
        
    - name: Clean up test data
      if: always()
      run: |
        JOB_ID="${{ steps.test_job.outputs.job_id }}"
        if [[ -n "${JOB_ID}" ]]; then
          echo "üßπ Cleaning up test job..."
          curl -s -X DELETE \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
            -H "x-client-info: ${{ env.TEST_RECEIPT_ID }}" \
            "https://${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co/rest/v1/jobs?id=eq.${JOB_ID}" || true
        fi
        
    - name: Rollback on failure
      if: failure() && steps.deploy.outcome == 'success'
      run: |
        echo "üîÑ Rolling back deployment..."
        if [[ -f "scripts/rollback-functions.sh" ]]; then
          bash scripts/rollback-functions.sh || {
            echo "‚ö†Ô∏è Rollback failed, manual intervention may be required"
          }
        else
          echo "‚ö†Ô∏è Rollback script not found"
        fi
      env:
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: Upload debug reports
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-reports-${{ github.run_id }}
        path: |
          debug-job-*.log
        retention-days: 30
        
    - name: Deployment summary
      if: always()
      run: |
        echo "üìù Deployment Summary"
        echo "===================="
        echo "Project: ${{ secrets.SUPABASE_PROJECT_REF }}"
        echo "Status: ${{ job.status }}"
        echo "Commit: ${{ github.sha }}"
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "‚úÖ Deployment validated successfully!"
        else
          echo "‚ùå Deployment failed or was rolled back"
        fi
        echo "===================="

  test:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test Edge Functions
      run: |
        echo "üß™ Testing deployed Edge Functions..."
        echo "üìç Base URL: https://${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co/functions/v1"
        
        # Test create_job endpoint
        echo "üìù Testing create_job endpoint..."
        CREATE_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
          -H "x-client-info: github-actions-pr-test" \
          -d '{
            "local_date": "2025-08-12",
            "scheduled_at": "2025-08-12T07:00:00Z",
            "preferred_name": "PR Test User",
            "include_weather": true,
            "include_news": true,
            "include_sports": false,
            "include_stocks": false,
            "stock_symbols": [],
            "include_calendar": false,
            "include_quotes": true,
            "quote_preference": "motivational",
            "voice_option": "voice1",
            "daystart_length": 180,
            "timezone": "America/New_York"
          }' \
          "https://${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co/functions/v1/create_job")
          
        echo "üìÑ Create job response:"
        echo "$CREATE_RESPONSE"
        
        # Test get_audio_status endpoint
        echo -e "\nüìù Testing get_audio_status endpoint..."
        STATUS_RESPONSE=$(curl -s -w "\n%{http_code}" -X GET \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
          -H "x-client-info: github-actions-pr-test" \
          "https://${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co/functions/v1/get_audio_status?date=2025-08-12")
          
        echo "üìÑ Get status response:"
        echo "$STATUS_RESPONSE"
        
        echo "‚úÖ Function testing completed"